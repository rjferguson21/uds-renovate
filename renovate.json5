{
    "enabled": true,
    "forkProcessing": "enabled",
    "$schema": "https://docs.renovatebot.com/renovate-schema.json",
    "extends": [
        ":dependencyDashboard",
        "config:base",
    ],
    // Disable reviewers getting added by renovate to limit notification noise
    "reviewersFromCodeOwners": false,
    "timezone": "America/New_York",
    "rebaseStalePrs": true,
    "schedule": ["after 7am and before 9am every weekday"],
    "dependencyDashboard": true,
    "dependencyDashboardTitle": "Renovate Dashboard ðŸ¤–",
    "rebaseWhen": "conflicted",
    "commitBodyTable": true,
    "suppressNotifications": ["prIgnoreNotification"],
    "pre-commit": {
        "enabled": true
    },
    "helm-values": {
        "fileMatch": [".*\\.ya?ml$"]
    },
    "kubernetes": {
        "fileMatch": [".*\\.ya?ml$"],
        "ignorePaths": [
            ".github"
        ]
    },
    "hostRules": [
      {
        "matchHost": "registry1.dso.mil",
        "hostType": "docker",
        "description": "Encrypted creds for registry1, scoped to this Github org using: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#encrypted",
        "encrypted": {
          "username": "wcFMA/xDdHCJBTolAQ//ev0Hr6J2PgtJKeh3/5n8ePmfx6FfwUpzKWPMzf+rZ4e57yXB9jYHu+fjUaFhE3Re0UXFZpZLwx5BRX0NrhpkJwAxtFIpIYSoz/XOhEf2AxtT057iWxBY+efU/26pgMnu+vYYvt2i115MFQKsRAeSQOcDX6iDWUOed3JnlA5zgnBmlqUhktHiUkteiSUBgfCSxC1fueAHZ+0DfOORhUko6bhsyxXpoPowGhGzM4va4RwuibbiVMIUgtcEV1Olmo26XPuDReEWq2b23xI5c6XQ00mPmrP00G2724HC2twcJdil/u4sQLBgboIALhSUv/4t6HAFR70mCbuBn2s8ThvGAoGCz16cRA0GZhAkEWWQnl1ycgIBimol6IklB7c5Ziv6GAUUm2WXtEdwlJ4EypNNoFx5ZCFSV6MZ2aw/L9FTZkpXNnTN4tDp/cSYS52zZ/m4pENsBL8nFCmrE1QHewAZfSThgZDj8KMEwZ0+hb4/2xUBVMkhkeroW2u+8iVKOhGc5jnSrPrL+1Ei2Ow0JKN0ohlYfCHit+63WSzf2IWeq8wA4qX+ypgCD/4dh6zZGNIKDCs8qnLn8+KV45AMTat3vSy1UetVicrXzbSQ456Z9i384QIPuuj2PetMWn4gg4jXHyL0rcX4PTaTNSO7LlsGEIFrGtTdAKQrT10+kDkIJfbSXwEvdzByRdZQgbv30EfU2WW+cf0u86DwNtbZu+zBAPqw/2RJ13FOWPHuaBPv2OmVQR0dsIHaqGoOz4gvHjJ6it1S+ODawMnC9apAGU3W1UKSa0AHZFc46tCuYh9UXcRA",
          "password": "wcFMA/xDdHCJBTolAQ/9EujXJGbQCHn7UGQrDzjQg2eD5x/KD/cgO1ksDBPiGiu9N4GyKp7sTh8oueN2p32uzT5MockH71mTPD8DjVb0k5psYam9gyaFJX5GzgRqNvJJQbvnHJ2XnjyH48zD9ealMoGWcD1NZa3qTzN5NkZTaMWWXUJnmryFkrbTjEkAIEVEyRnNuEkhW4wyUmv9OhJiGnawPT8JacIka0Mn6GPxkwx544ChRD+gHjz1mGmr/3yOwZL8kUFQuGFy+JeQAKcEf+2/6YF0gOGzkc7LXHTwG9SQL3yIq6npxt5GAYtEz2BKPG5TZfRqeFY8ooV+dSskngnY5RliZ9YdgzQccpGA8jl5zhiGdUcOP2WbhvJkW8Ykn66ipaTyAgVjGoTnBuPDfWYNSmnbvS2aRYnqda/gGVqoDlHFPk5dvVRz3TaUag2Dlp6tg+UTVxxq54gm9+JXToW7yEELhcjhZehRpJom1pRTftBulLuBoGSw/F4hnIoQjNeILhCP1nCPnd3rpjOgOMeWy2Bsipf4Deo+cXqjpKzF2VPlrkBu522boYF00yNCXvQ9RIH/Bd3x/6fVf/ECrWcAHngK/wrEsYTblHSokfM7I/27paoepJypukwYOqB9YUzhtsoetAvMH8tpbFBJ8UyC/RX6TPPm7hpQJfucVXBfeeq6ZGs0TXDYcYJPR0fScwEXiBHubrbJcct57sg/WsaybperV1aemzEjPFgl6Jy60S2z+xSlseFVmUskaq+cFoeU6APu1zLQbj1o4dRRRfaa56IGP5cUwZ/bzsrT1dP3kYBfoSJgdoWTJNg9LX2QQ9yi+PLZqZg/OXbVshn4RDoX18I"
        }
      }
    ],
    "regexManagers": [
        // Matches github-tags pointing to items in githubusercontent (i.e. https://github.com/defenseunicorns/uds-core/blob/e45de0e5917a2ca6c3e30e593e2d9a8d393849a9/.vscode/settings.json#L12)
        {
            "fileMatch": [".*(\\.ya?ml|\\.json)$"],
            "matchStrings": [
                // Test: https://regex101.com/r/r1nWoZ/1
                "https:\\/\\/raw\\.githubusercontent\\.com\\/(?<depName>[^\\/]+\\/[^\\/]+)\\/(?<currentValue>[^\\/]+)"
            ],
            "versioningTemplate": "semver-coerced",
            "datasourceTemplate": "github-tags"
        },
        // Matches npm modules in npm install commands (i.e. https://github.com/defenseunicorns/uds-core/blob/f8e65159873f87be5912b73cc6f0a5ff26b7bed0/.github/workflows/commitlint.yaml#L26)
        {
            "fileMatch": [".*(\\.ya?ml|\\.json)$"],
            "matchStrings": [
                // Test: https://regex101.com/r/321nL5/1
                "npm install ([\\w\\- ]+ )?(?<depName>@?[^\\s]*?)@(?<currentValue>[^\\s]+)"
            ],
            "datasourceTemplate": "npm"
        },
        // Matches specified datasources where a colon separates the version on the following line (i.e. https://github.com/defenseunicorns/zarf/blob/7e91d3b9823b52fe6d0f563d692c8af57faa6005/examples/big-bang/zarf.yaml#L5)
        {
            "fileMatch": [".*\\.ya?ml$"],
            "matchStrings": [
                // Test: https://regex101.com/r/d9t0lt/1
                "# renovate: datasource=(?<datasource>.*?) depName=(?<depName>.*?)( versioning=(?<versioning>.*?))?( extractVersion=(?<extractVersion>.*?))?( registryUrl=(?<registryUrl>.*?))?\\s.*:\\s*['\"]?(?<currentValue>[v0-9].*?)['\"]?(\\s|$)"
            ],
            "versioningTemplate": "{{#if versioning}}{{{versioning}}}{{else}}semver-coerced{{/if}}",
            "extractVersionTemplate": "{{#if extractVersion}}{{{extractVersion}}}{{else}}^(?<version>.*)${{/if}}"
        },
        // Matches specified datasources for brew where an @ separates the version on the following line (i.e. https://github.com/defenseunicorns/uds-core/blob/5a2666f6a5ba89686c6dc1fecb0db98512b1b9f8/.github/actions/setup/action.yaml#L32)
        {
            "fileMatch": [".*\\.ya?ml$"],
            "matchStrings": [
                // Test: https://regex101.com/r/p3Cpjx/1
                "# renovate: datasource=(?<datasource>.*?) depName=(?<depName>.*?)( versioning=(?<versioning>.*?))?\\s.*brew.*@\\s*['\"]?(?<currentValue>[v0-9].*?)['\"]?(\\s|$)"
            ],
            "versioningTemplate": "{{#if versioning}}{{{versioning}}}{{else}}semver-coerced{{/if}}",
            "extractVersionTemplate": "^v(?<version>.*)$"
        },
        // Matches individual images in a `zarf.yaml`'s `images:` section that are tagged with a version (allowing for # renovate overrides)
        {
            "fileMatch": [ "(^|/)zarf\\.ya?ml$" ],
            "matchStrings": [
                // Test: https://regex101.com/r/Bd8IBp/1
                "- ['\"]?(?<depName>[^\"'\\s]+):(?<currentValue>[^\"'\\s]+)['\"]?( # renovate:( versioning=(?<versioning>.*?))?( extractVersion=(?<extractVersion>.*?))?)?(\\s|$)"
            ],
            "versioningTemplate": "{{#if versioning}}{{{versioning}}}{{else}}semver-coerced{{/if}}",
            "extractVersionTemplate": "{{#if extractVersion}}{{{extractVersion}}}{{else}}^(?<version>.*)${{/if}}",
            "datasourceTemplate": "docker"
        },
        // Matches individual helm repo charts in a `zarf.yaml`'s `charts:` section that specify `version` then `url` 
        {
            "fileMatch": [ "(^|/)zarf\\.ya?ml$" ],
            "matchStringsStrategy": "recursive",
            "matchStrings": [
                // Match the chart section. Test: https://regex101.com/r/1DL0tI/3
                "(?m)charts:(.|\\n)*?(^\\s{4}[\\w:]+|\\n$|^\\s{2}-)",
                // Match a chart entry. Test: https://regex101.com/r/ibpxYd/1
                "(?m)name:(.|\\n)+?(^\\s{4}[\\w\\-:]+|\\n$|^\\s{2}-|^\\s{6}-)",
                // Match the parts of a chart entry. Test: https://regex101.com/r/nruXFi/1
                "(?m)name: [\"']?(?<depName>.+?)[\"']?$(.|\\n)*?version: [\"']?(?<currentValue>.+?)[\"']?$(.|\\n)*?url: [\"']?(?<registryUrl>.+?)[\"']?$"
            ],
            "datasourceTemplate": "helm"
        },
        // Matches individual helm repo charts in a `zarf.yaml`'s `charts:` section that specify `url` then `version` 
        {
            "fileMatch": [ "(^|/)zarf.yaml$" ],
            "matchStringsStrategy": "recursive",
            "matchStrings": [
                // Match the chart section. Test: https://regex101.com/r/1DL0tI/3
                "(?m)charts:(.|\\n)*?(^\\s{4}[\\w:]+|\\n$|^\\s{2}-)",
                // Match a chart entry. Test: https://regex101.com/r/ibpxYd/1
                "(?m)name:(.|\\n)+?(^\\s{4}[\\w\\-:]+|\\n$|^\\s{2}-|^\\s{6}-)",
                // Match the parts of a chart entry. Test: https://regex101.com/r/iqP5RJ/1
                "(?m)name: [\"']?(?<depName>.+?)[\"']?$(.|\\n)*?url: [\"']?(?<registryUrl>.+?)[\"']?$(.|\\n)*?version: [\"']?(?<currentValue>.+?)[\"']?$"
            ],
            "datasourceTemplate": "helm"
        },
        // Matches individual helm git charts in a `zarf.yaml`'s `charts:` section that specify `version` then `url` 
        {
            "fileMatch": [ "(^|/)zarf\\.ya?ml$" ],
            "matchStringsStrategy": "recursive",
            "matchStrings": [
                // Match the chart section. Test: https://regex101.com/r/1DL0tI/3
                "(?m)charts:(.|\\n)*?(^\\s{4}[\\w:]+|\\n$|^\\s{2}-)",
                // Match a chart entry. Test: https://regex101.com/r/ibpxYd/1
                "(?m)name:(.|\\n)+?(^\\s{4}[\\w\\-:]+|\\n$|^\\s{2}-|^\\s{6}-)",
                // Match the parts of a chart entry. Test: https://regex101.com/r/PIIH1p/1
                "(?m)name:(.|\\n)*?version: [\"']?(?<currentValue>.+?)[\"']?$(.|\\n)*?url: [\"']?(?<depName>.+?\\.git)[\"']?$"
            ],
            "datasourceTemplate": "git-tags"
        },
        // Matches individual helm git charts in a `zarf.yaml`'s `charts:` section that specify `url` then `version` 
        {
            "fileMatch": [ "(^|/)zarf.yaml$" ],
            "matchStringsStrategy": "recursive",
            "matchStrings": [
                // Match the chart section. Test: https://regex101.com/r/1DL0tI/3
                "(?m)charts:(.|\\n)*?(^\\s{4}[\\w:]+|\\n$|^\\s{2}-)",
                // Match a chart entry. Test: https://regex101.com/r/ibpxYd/1
                "(?m)name:(.|\\n)+?(^\\s{4}[\\w\\-:]+|\\n$|^\\s{2}-|^\\s{6}-)",
                // Match the parts of a chart entry. Test: https://regex101.com/r/m71Sn5/1
                "(?m)name:(.|\\n)*?url: [\"']?(?<depName>.+?\\.git)[\"']?$(.|\\n)*?version: [\"']?(?<currentValue>.+?)[\"']?$"
            ],
            "datasourceTemplate": "git-tags"
        },
        // Matches individual helm oci charts in a `zarf.yaml`'s `charts:` section that specify `version` then `url` 
        {
            "fileMatch": [ "(^|/)zarf\\.ya?ml$" ],
            "matchStringsStrategy": "recursive",
            "matchStrings": [
                // Match the chart section. Test: https://regex101.com/r/1DL0tI/3
                "(?m)charts:(.|\\n)*?(^\\s{4}[\\w:]+|\\n$|^\\s{2}-)",
                // Match a chart entry. Test: https://regex101.com/r/ibpxYd/1
                "(?m)name:(.|\\n)+?(^\\s{4}[\\w\\-:]+|\\n$|^\\s{2}-|^\\s{6}-)",
                // Match the parts of a chart entry. Test: https://regex101.com/r/gYGkgq/1
                "(?m)name:(.|\\n)*?version: [\"']?(?<currentValue>.+?)[\"']?$(.|\\n)*?url: [\"']?oci:\\/\\/(?<depName>.+?)[\"']?$"
            ],
            "datasourceTemplate": "docker"
        },
        // Matches individual helm oci charts in a `zarf.yaml`'s `charts:` section that specify `url` then `version` 
        {
            "fileMatch": [ "(^|/)zarf.yaml$" ],
            "matchStringsStrategy": "recursive",
            "matchStrings": [
                // Match the chart section. Test: https://regex101.com/r/1DL0tI/3
                "(?m)charts:(.|\\n)*?(^\\s{4}[\\w:]+|\\n$|^\\s{2}-)",
                // Match a chart entry. Test: https://regex101.com/r/ibpxYd/1
                "(?m)name:(.|\\n)+?(^\\s{4}[\\w\\-:]+|\\n$|^\\s{2}-|^\\s{6}-)",
                // Match the parts of a chart entry. Test: https://regex101.com/r/VDMzhy/1
                "(?m)name:(.|\\n)*?url: [\"']?oci:\\/\\/(?<depName>.+?)[\"']?$(.|\\n)*?version: [\"']?(?<currentValue>.+?)[\"']?$"
            ],
            "datasourceTemplate": "docker"
        },
        // Matches oci packages in a `uds-bundle.yaml`'s `zarf-packages:` section that specify `repository` then `ref` 
        {
            "fileMatch": [ "(^|/)uds-bundle.yaml$" ],
            "matchStringsStrategy": "recursive",
            "matchStrings": [
                // Match the parts of a chart entry. Test: https://regex101.com/r/IFgEw0/1
                "(?m)repository: [\"']?(?<depName>.+?)[\"']?$(.)*(\n.*){0,2}ref: [\"']?(?<currentValue>.+?)[\"']?$"
            ],
            "datasourceTemplate": "docker"
        }
    ],
    "packageRules": [
        // Excludes a bad tag in registry1 from when this image was based on UBI
        {
            "matchPackageNames": ["registry1.dso.mil/ironbank/big-bang/base"],
            "allowedVersions": "!/8.4/"
        }
    ]
}
